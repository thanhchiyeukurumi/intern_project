{
	"info": {
		"_postman_id": "4276b239-7a39-45c6-b8dd-aed513584274",
		"name": "Category API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37747897"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// T·∫°o timestamp ƒë·ªÉ theo d√µi th·ªùi gian th·ª±c thi",
					"pm.environment.set('testStartTime', new Date().toISOString());",
					"",
					"// Log th√¥ng tin session test",
					"console.log('====================================');",
					"console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y test API Category');",
					"console.log('‚è∞ Th·ªùi gian: ' + new Date().toLocaleString());",
					"console.log('====================================');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// ƒê∆∞·ª£c g·ªçi sau m·ªói request",
					"const startTime = new Date(pm.environment.get('testStartTime'));",
					"const endTime = new Date();",
					"const durationMs = endTime - startTime;",
					"",
					"// T√≠nh th·ªùi gian ch·∫°y t·ªïng th·ªÉ n·∫øu ƒë√¢y l√† request cu·ªëi c√πng",
					"if (pm.info.requestName === 'delete cate') {",
					"    console.log('====================================');",
					"    console.log('‚úÖ Ho√†n th√†nh test API Category');",
					"    console.log('‚è∞ Th·ªùi gian: ' + new Date().toLocaleString());",
					"    console.log('‚åõ T·ªïng th·ªùi gian: ' + (durationMs / 1000).toFixed(2) + ' gi√¢y');",
					"    console.log('====================================');",
					"",
					"    // X√≥a bi·∫øn th·ªùi gian b·∫Øt ƒë·∫ßu",
					"    setTimeout(function() {",
					"        pm.environment.unset('testStartTime');",
					"    }, 1000);",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "CRUD category Copy",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa response",
									"console.log('=== K·∫æT QU·∫¢ ƒêƒÇNG NH·∫¨P ===');",
									"console.log('Status: ' + pm.response.code + ' ' + pm.response.status);",
									"console.log('Response time: ' + pm.response.responseTime + 'ms');",
									"",
									"// Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p th√†nh c√¥ng kh√¥ng",
									"pm.test(\"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// T√¨m v√† l∆∞u token t·ª´ c√°c v·ªã tr√≠ c√≥ th·ªÉ",
									"let token = null;",
									"",
									"if (response.token) {",
									"    // Tr∆∞·ªùng h·ª£p token n·∫±m ·ªü c·∫•p 1",
									"    token = response.token;",
									"    pm.environment.set(\"token\", token);",
									"    console.log('‚úÖ Token ƒë∆∞·ª£c l∆∞u t·ª´ response.token');",
									"} else if (response.data && response.data.token) {",
									"    // Tr∆∞·ªùng h·ª£p token n·∫±m trong res.data.token",
									"    token = response.data.token;",
									"    pm.environment.set(\"token\", token);",
									"    console.log('‚úÖ Token ƒë∆∞·ª£c l∆∞u t·ª´ response.data.token');",
									"} else if (response.data && response.data.user && response.data.refreshToken) {",
									"    // Tr∆∞·ªùng h·ª£p token trong c·∫•u tr√∫c ph·ª©c t·∫°p h∆°n",
									"    token = response.data.token;",
									"    pm.environment.set(\"token\", token);",
									"    pm.environment.set(\"refreshToken\", response.data.refreshToken);",
									"    ",
									"    if (response.data.user && response.data.user.id) {",
									"        pm.environment.set(\"userId\", response.data.user.id);",
									"    }",
									"    console.log('‚úÖ Token ƒë∆∞·ª£c l∆∞u t·ª´ c·∫•u tr√∫c user/refresh');",
									"}",
									"",
									"// Hi·ªÉn th·ªã token ƒë√£ l∆∞u",
									"const savedToken = pm.environment.get(\"token\");",
									"",
									"pm.test(\"‚úÖ Token ƒë√£ ƒë∆∞·ª£c l∆∞u\", function () {",
									"    pm.expect(savedToken).to.exist;",
									"});",
									"",
									"// Hi·ªÉn th·ªã m·ªôt ph·∫ßn c·ªßa token ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt",
									"if (savedToken) {",
									"    const shortToken = savedToken.substring(0, 15) + '...';",
									"    console.log('Token (ƒë√£ l∆∞u): ' + shortToken);",
									"    ",
									"    // Ki·ªÉm tra c·∫•u tr√∫c c·ªßa token (th∆∞·ªùng l√† JWT)",
									"    const tokenParts = savedToken.split('.');",
									"    if (tokenParts.length === 3) {",
									"        console.log('‚úÖ Token c√≥ ƒë·ªãnh d·∫°ng JWT h·ª£p l·ªá');",
									"    }",
									"}",
									"",
									"console.log('========================');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/auth/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories?page=8",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": "8"
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa response",
									"console.log('=== K·∫æT QU·∫¢ T·∫†O DANH M·ª§C ===');",
									"console.log('Status: ' + pm.response.code + ' ' + pm.response.status);",
									"console.log('Response time: ' + pm.response.responseTime + 'ms');",
									"",
									"// Ki·ªÉm tra xem t·∫°o danh m·ª•c c√≥ th√†nh c√¥ng kh√¥ng",
									"pm.test(\"‚úÖ T·∫°o danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Hi·ªÉn th·ªã c·∫•u tr√∫c c·ªßa response ƒë·ªÉ d·ªÖ debug",
									"console.log('C·∫•u tr√∫c response:');",
									"console.log(JSON.stringify(response, null, 2).substring(0, 300) + '...');",
									"",
									"// T√¨m v√† l∆∞u category ID t·ª´ c√°c v·ªã tr√≠ c√≥ th·ªÉ",
									"let categoryId;",
									"",
									"if (response.data && response.data.data && response.data.data.id) {",
									"    // Tr∆∞·ªùng h·ª£p ID n·∫±m trong response.data.data.id",
									"    categoryId = response.data.data.id;",
									"    console.log('‚úÖ ID ƒë∆∞·ª£c l·∫•y t·ª´ response.data.data.id');",
									"} else if (response.data && response.data.id) {",
									"    // Tr∆∞·ªùng h·ª£p ID n·∫±m trong response.data.id",
									"    categoryId = response.data.id;",
									"    console.log('‚úÖ ID ƒë∆∞·ª£c l·∫•y t·ª´ response.data.id');",
									"} else if (response.data) {",
									"    // Tr∆∞·ªùng h·ª£p response.data l√† s·ªë ho·∫∑c chu·ªói ch·ª©a ID",
									"    categoryId = response.data;",
									"    console.log('‚úÖ ID ƒë∆∞·ª£c l·∫•y t·ª´ response.data');",
									"}",
									"",
									"// L∆∞u ID v√†o bi·∫øn m√¥i tr∆∞·ªùng",
									"if (categoryId) {",
									"    pm.environment.set(\"category_id\", categoryId);",
									"    console.log('‚úÖ Category ID ƒë√£ l∆∞u: ' + categoryId);",
									"    ",
									"    // Ki·ªÉm tra xem ID c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá kh√¥ng",
									"    pm.test(\"‚úÖ Category ID l√† s·ªë h·ª£p l·ªá\", function() {",
									"        pm.expect(Number.isFinite(Number(categoryId))).to.be.true;",
									"    });",
									"} else {",
									"    console.error('‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y category_id trong response');",
									"}",
									"",
									"// Th√™m ki·ªÉm tra cho d·ªØ li·ªáu danh m·ª•c",
									"if (response.data && response.data.data) {",
									"    const category = response.data.data;",
									"    console.log('Th√¥ng tin danh m·ª•c:');",
									"    console.log('- ID: ' + category.id);",
									"    console.log('- T√™n: ' + category.name);",
									"    console.log('- Slug: ' + category.slug);",
									"}",
									"",
									"console.log('========================');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test_category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the category just created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa response",
									"console.log('=== TH√îNG TIN CHI TI·∫æT DANH M·ª§C ===');",
									"console.log('Status: ' + pm.response.code + ' ' + pm.response.status);",
									"console.log('Response time: ' + pm.response.responseTime + 'ms');",
									"",
									"// Ki·ªÉm tra xem l·∫•y danh m·ª•c c√≥ th√†nh c√¥ng kh√¥ng",
									"pm.test(\"‚úÖ L·∫•y th√¥ng tin danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Ki·ªÉm tra ID c·ªßa danh m·ª•c c√≥ ƒë√∫ng v·ªõi ID ƒë√£ l∆∞u trong environment",
									"const storedCategoryId = pm.environment.get(\"category_id\");",
									"let categoryData;",
									"",
									"if (response.data && response.data.data) {",
									"    categoryData = response.data.data;",
									"} else if (response.data) {",
									"    categoryData = response.data;",
									"}",
									"",
									"if (categoryData) {",
									"    pm.test(\"‚úÖ ID danh m·ª•c kh·ªõp v·ªõi gi√° tr·ªã ƒë√£ l∆∞u\", function() {",
									"        pm.expect(categoryData.id.toString()).to.equal(storedCategoryId.toString());",
									"    });",
									"    ",
									"    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa danh m·ª•c",
									"    console.log('Chi ti·∫øt danh m·ª•c:');",
									"    console.log('- ID: ' + categoryData.id);",
									"    console.log('- T√™n: ' + categoryData.name);",
									"    console.log('- Slug: ' + categoryData.slug);",
									"    ",
									"    if (categoryData.parent_id) {",
									"        console.log('- Danh m·ª•c cha: ' + categoryData.parent_id);",
									"    } else {",
									"        console.log('- Danh m·ª•c g·ªëc (kh√¥ng c√≥ danh m·ª•c cha)');",
									"    }",
									"    ",
									"    // T·∫°o li√™n k·∫øt gi√∫p ng∆∞·ªùi d√πng d·ªÖ d√†ng m·ªü danh m·ª•c tr√™n tr√¨nh duy·ªát",
									"    console.log('- URL: localhost:3000/categories/' + categoryData.id);",
									"} else {",
									"    console.error('‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu danh m·ª•c trong response');",
									"}",
									"",
									"console.log('========================');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa response",
									"console.log('=== K·∫æT QU·∫¢ C·∫¨P NH·∫¨T DANH M·ª§C ===');",
									"console.log('Status: ' + pm.response.code + ' ' + pm.response.status);",
									"console.log('Response time: ' + pm.response.responseTime + 'ms');",
									"",
									"// L·∫•y d·ªØ li·ªáu t·ª´ request ƒë·ªÉ so s√°nh v·ªõi response",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"console.log('D·ªØ li·ªáu c·∫≠p nh·∫≠t:');",
									"console.log(JSON.stringify(requestBody, null, 2));",
									"",
									"// Ki·ªÉm tra xem c·∫≠p nh·∫≠t danh m·ª•c c√≥ th√†nh c√¥ng kh√¥ng",
									"pm.test(\"‚úÖ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// L·∫•y d·ªØ li·ªáu danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t",
									"let updatedCategory;",
									"if (response.data && response.data.data) {",
									"    updatedCategory = response.data.data;",
									"} else if (response.data) {",
									"    updatedCategory = response.data;",
									"}",
									"",
									"if (updatedCategory) {",
									"    // Ki·ªÉm tra t√™n danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch∆∞a",
									"    pm.test(\"‚úÖ T√™n danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t\", function() {",
									"        pm.expect(updatedCategory.name).to.equal(requestBody.name);",
									"    });",
									"    ",
									"    // Ki·ªÉm tra parent_id n·∫øu c√≥",
									"    if (requestBody.parent_id) {",
									"        pm.test(\"‚úÖ Parent ID ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t\", function() {",
									"            const reqParentId = Number(requestBody.parent_id);",
									"            const resParentId = Number(updatedCategory.parent_id);",
									"            pm.expect(resParentId).to.equal(reqParentId);",
									"        });",
									"    }",
									"    ",
									"    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t",
									"    console.log('Danh m·ª•c sau khi c·∫≠p nh·∫≠t:');",
									"    console.log('- ID: ' + updatedCategory.id);",
									"    console.log('- T√™n: ' + updatedCategory.name);",
									"    console.log('- Slug: ' + updatedCategory.slug);",
									"    ",
									"    if (updatedCategory.parent_id) {",
									"        console.log('- Danh m·ª•c cha: ' + updatedCategory.parent_id);",
									"    } else {",
									"        console.log('- Danh m·ª•c g·ªëc (kh√¥ng c√≥ danh m·ª•c cha)');",
									"    }",
									"} else {",
									"    console.error('‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu danh m·ª•c trong response');",
									"}",
									"",
									"console.log('========================');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test_category new\",\r\n  \"parent_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the category just updated",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa response",
									"console.log('=== K·∫æT QU·∫¢ X√ìA DANH M·ª§C ===');",
									"console.log('Status: ' + pm.response.code + ' ' + pm.response.status);",
									"console.log('Response time: ' + pm.response.responseTime + 'ms');",
									"",
									"// L·∫•y ID danh m·ª•c ƒë√£ x√≥a t·ª´ URL",
									"const url = pm.request.url.toString();",
									"const deletedCategoryId = pm.environment.get(\"category_id\");",
									"",
									"console.log('ƒê√£ x√≥a danh m·ª•c v·ªõi ID: ' + deletedCategoryId);",
									"",
									"// Ki·ªÉm tra xem x√≥a danh m·ª•c c√≥ th√†nh c√¥ng kh√¥ng",
									"pm.test(\"‚úÖ X√≥a danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.eql(true);",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Ki·ªÉm tra th√¥ng b√°o tr·∫£ v·ªÅ",
									"if (response.message) {",
									"    console.log('Th√¥ng b√°o: ' + response.message);",
									"    ",
									"    pm.test(\"‚úÖ Nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o x√≥a th√†nh c√¥ng\", function() {",
									"        pm.expect(response.message).to.include('ok');",
									"    });",
									"}",
									"",
									"// G·ª£i √Ω ki·ªÉm tra l·∫°i s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c",
									"console.log('G·ª£i √Ω: G·ª≠i request GET ƒë·∫øn /categories/' + deletedCategoryId + ' ƒë·ªÉ ki·ªÉm tra danh m·ª•c ƒë√£ b·ªã x√≥a ch∆∞a');",
									"",
									"// T·∫°o n√∫t ch·∫°y t·ª± ƒë·ªông request ki·ªÉm tra",
									"console.log('========================');",
									"",
									"// X√≥a bi·∫øn environment khi ƒë√£ ho√†n th√†nh",
									"setTimeout(function() {",
									"    pm.environment.unset(\"category_id\");",
									"    console.log('‚úÖ ƒê√£ x√≥a bi·∫øn category_id kh·ªèi environment');",
									"}, 1000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}