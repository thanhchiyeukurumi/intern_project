{
	"info": {
		"_postman_id": "4276b239-7a39-45c6-b8dd-aed513584274",
		"name": "Category API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37747897"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// T·∫°o timestamp ƒë·ªÉ theo d√µi th·ªùi gian th·ª±c thi",
					"pm.environment.set('testStartTime', new Date().toISOString());",
					"",
					"// Log th√¥ng tin session test",
					"console.log('====================================');",
					"console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y test API Category');",
					"console.log('‚è∞ Th·ªùi gian: ' + new Date().toLocaleString());",
					"console.log('====================================');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// ƒê∆∞·ª£c g·ªçi sau khi t·∫•t c·∫£ c√°c request trong collection ch·∫°y xong",
					"const startTime = new Date(pm.environment.get('testStartTime'));",
					"const endTime = new Date();",
					"const durationMs = endTime - startTime;",
					"",
					"// T√≠nh th·ªùi gian ch·∫°y t·ªïng th·ªÉ n·∫øu ƒë√¢y l√† request cu·ªëi c√πng",
					"if (pm.info.requestName === 'Cleanup Conflict Category') {",
					"    console.log('====================================');",
					"    console.log('‚úÖ Ho√†n th√†nh test API Category');",
					"    console.log('‚è∞ Th·ªùi gian: ' + new Date().toLocaleString());",
					"    console.log('‚åõ T·ªïng th·ªùi gian: ' + (durationMs / 1000).toFixed(2) + ' gi√¢y');",
					"    console.log('====================================');",
					"",
					"    // X√≥a bi·∫øn th·ªùi gian b·∫Øt ƒë·∫ßu",
					"    setTimeout(function() {",
					"        pm.environment.unset('testStartTime');",
					"    }, 1000);",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ ƒêƒÉng nh·∫≠p Admin: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"ƒêƒÉng nh·∫≠p th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// L∆∞u token v√†o bi·∫øn m√¥i tr∆∞·ªùng",
									"if (response.data && response.data.token) {",
									"    pm.environment.set(\"adminToken\", response.data.token);",
									"} else if (response.token) {",
									"    pm.environment.set(\"adminToken\", response.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/auth/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"login"
							]
						},
						"description": "ƒêƒÉng nh·∫≠p v·ªõi quy·ªÅn admin"
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ ƒêƒÉng nh·∫≠p User: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"ƒêƒÉng nh·∫≠p th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// L∆∞u token v√†o bi·∫øn m√¥i tr∆∞·ªùng",
									"if (response.data && response.data.token) {",
									"    pm.environment.set(\"userToken\", response.data.token);",
									"} else if (response.token) {",
									"    pm.environment.set(\"userToken\", response.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user@example.com\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/auth/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"login"
							]
						},
						"description": "ƒêƒÉng nh·∫≠p v·ªõi quy·ªÅn user th√¥ng th∆∞·ªùng"
					},
					"response": []
				}
			],
			"description": "M·ª•c ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token cho c√°c API test"
				},
				{
			"name": "2. Happy Path CRUD",
			"item": [
				{
					"name": "[Admin] Create Root Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ T·∫°o danh m·ª•c: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"T·∫°o danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// L∆∞u ID danh m·ª•c ƒë·ªÉ d√πng cho c√°c test ti·∫øp theo",
									"if (response.data && response.data.id) {",
									"    pm.environment.set(\"category_id\", response.data.id);",
									"    console.log('ID danh m·ª•c: ' + response.data.id);",
									"} else if (response.data && response.data.data && response.data.data.id) {",
									"    pm.environment.set(\"category_id\", response.data.data.id);",
									"    console.log('ID danh m·ª•c: ' + response.data.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Root Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "T·∫°o danh m·ª•c g·ªëc m·ªõi (kh√¥ng c√≥ parent_id)"
					},
					"response": []
				},
				{
					"name": "[Public] Get Created Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ L·∫•y th√¥ng tin danh m·ª•c: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"L·∫•y th√¥ng tin danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Ki·ªÉm tra d·ªØ li·ªáu danh m·ª•c",
									"if (response.data) {",
									"    const category = response.data.data || response.data;",
									"    console.log('T√™n danh m·ª•c: ' + category.name);",
									"    console.log('ID danh m·ª•c: ' + category.id);",
									"    ",
									"    pm.test(\"D·ªØ li·ªáu danh m·ª•c ch√≠nh x√°c\", function() {",
									"        pm.expect(category.id).to.equal(pm.environment.get(\"category_id\"));",
									"        pm.expect(category.name).to.equal(\"Test Root Category\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "L·∫•y th√¥ng tin danh m·ª•c v·ª´a t·∫°o (kh√¥ng c·∫ßn x√°c th·ª±c)"
					},
					"response": []
				},
				{
					"name": "[Admin] Update Category (Add Parent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ C·∫≠p nh·∫≠t danh m·ª•c: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Ki·ªÉm tra d·ªØ li·ªáu c·∫≠p nh·∫≠t",
									"if (response.data) {",
									"    const category = response.data.data || response.data;",
									"    console.log('T√™n m·ªõi: ' + category.name);",
									"    console.log('ID danh m·ª•c cha: ' + category.parent_id);",
									"    ",
									"    pm.test(\"D·ªØ li·ªáu c·∫≠p nh·∫≠t ch√≠nh x√°c\", function() {",
									"        pm.expect(category.name).to.equal(\"Updated Test Category\");",
									"        pm.expect(category.parent_id.toString()).to.equal(\"1\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Updated Test Category\",\r\n  \"parent_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "C·∫≠p nh·∫≠t t√™n v√† th√™m danh m·ª•c cha cho danh m·ª•c"
					},
					"response": []
				},
				{
					"name": "[Public] Get Updated Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ L·∫•y th√¥ng tin danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"L·∫•y th√¥ng tin danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Ki·ªÉm tra d·ªØ li·ªáu danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
									"if (response.data) {",
									"    const category = response.data.data || response.data;",
									"    console.log('T√™n danh m·ª•c: ' + category.name);",
									"    console.log('ID danh m·ª•c cha: ' + category.parent_id);",
									"    ",
									"    pm.test(\"D·ªØ li·ªáu danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t\", function() {",
									"        pm.expect(category.id).to.equal(pm.environment.get(\"category_id\"));",
									"        pm.expect(category.name).to.equal(\"Updated Test Category\");",
									"        pm.expect(category.parent_id.toString()).to.equal(\"1\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "L·∫•y th√¥ng tin danh m·ª•c sau khi c·∫≠p nh·∫≠t"
					},
					"response": []
				},
				{
					"name": "[Admin] Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ X√≥a danh m·ª•c: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"X√≥a danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "X√≥a danh m·ª•c theo ID"
					},
					"response": []
				},
				{
					"name": "[Public] Verify Deletion (Get Deleted Category)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Ki·ªÉm tra danh m·ª•c ƒë√£ x√≥a: ' + (!response.success ? 'Kh√¥ng t√¨m th·∫•y (ƒë√∫ng)' : 'V·∫´n c√≤n t·ªìn t·∫°i (sai)'));",
									"",
									"pm.test(\"Danh m·ª•c ƒë√£ b·ªã x√≥a\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "Ki·ªÉm tra xem danh m·ª•c ƒë√£ b·ªã x√≥a ch∆∞a"
					},
					"response": []
				}
			],
			"description": "Ki·ªÉm tra lu·ªìng CRUD c∆° b·∫£n cho danh m·ª•c"
		},
		{
			"name": "3. Validation Tests",
			"item": [
				{
					"name": "[Admin] Create - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test thi·∫øu t√™n danh m·ª•c: ' + (!response.success ? 'L·ªói validation (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"L·ªói validation khi thi·∫øu t√™n danh m·ª•c\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(422);",
									"    ",
									"    // Ki·ªÉm tra m·∫£ng l·ªói validation",
									"    pm.expect(response.errors).to.be.an('array');",
									"    const nameError = response.errors.find(err => err.field === 'name');",
									"    pm.expect(nameError).to.exist;",
									"    console.log('Th√¥ng b√°o l·ªói: ' + nameError.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"parent_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra validation khi thi·∫øu t√™n danh m·ª•c"
					},
					"response": []
				},
				{
					"name": "[Admin] Create - Name Too Short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test t√™n danh m·ª•c qu√° ng·∫Øn: ' + (!response.success ? 'L·ªói validation (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"L·ªói validation khi t√™n danh m·ª•c qu√° ng·∫Øn\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(422);",
									"    ",
									"    // Ki·ªÉm tra m·∫£ng l·ªói validation",
									"    pm.expect(response.errors).to.be.an('array');",
									"    const nameError = response.errors.find(err => err.field === 'name');",
									"    pm.expect(nameError).to.exist;",
									"    console.log('Th√¥ng b√°o l·ªói: ' + nameError.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"A\",\r\n  \"parent_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra validation khi t√™n danh m·ª•c qu√° ng·∫Øn (d∆∞·ªõi 2 k√Ω t·ª±)"
					},
					"response": []
				},
				{
					"name": "[Admin] Create - Invalid Parent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test ID danh m·ª•c cha kh√¥ng h·ª£p l·ªá: ' + (!response.success ? 'L·ªói (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"L·ªói khi ID danh m·ª•c cha kh√¥ng t·ªìn t·∫°i\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 422]);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Category\",\r\n  \"parent_id\": \"99999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra khi ID danh m·ª•c cha kh√¥ng t·ªìn t·∫°i"
					},
					"response": []
				},
				{
					"name": "[Admin] Update - Missing Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// T·∫°o m·ªôt danh m·ª•c m·ªõi ƒë·ªÉ test update",
									"const createRequest = {",
									"    url: 'localhost:3000/categories',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': 'Bearer ' + pm.environment.get('adminToken')",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            name: 'Temp Category For Update Test'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(createRequest, function (err, res) {",
									"    if (!err && res.code === 201) {",
									"        const responseJson = res.json();",
									"        if (responseJson.data && responseJson.data.id) {",
									"            pm.environment.set('validation_category_id', responseJson.data.id);",
									"        } else if (responseJson.data && responseJson.data.data && responseJson.data.data.id) {",
									"            pm.environment.set('validation_category_id', responseJson.data.data.id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test c·∫≠p nh·∫≠t thi·∫øu t√™n: ' + (!response.success ? 'L·ªói validation (ƒë√∫ng)' : 'C·∫≠p nh·∫≠t th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"L·ªói validation khi c·∫≠p nh·∫≠t thi·∫øu t√™n\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(422);",
									"    ",
									"    // Ki·ªÉm tra m·∫£ng l·ªói validation",
									"    pm.expect(response.errors).to.be.an('array');",
									"    const nameError = response.errors.find(err => err.field === 'name');",
									"    pm.expect(nameError).to.exist;",
									"    console.log('Th√¥ng b√°o l·ªói: ' + nameError.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"parent_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{validation_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{validation_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra validation khi c·∫≠p nh·∫≠t thi·∫øu t√™n danh m·ª•c"
					},
					"response": []
				},
				{
					"name": "[Admin] Update - Invalid Parent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test c·∫≠p nh·∫≠t v·ªõi ID cha kh√¥ng h·ª£p l·ªá: ' + (!response.success ? 'L·ªói (ƒë√∫ng)' : 'C·∫≠p nh·∫≠t th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"L·ªói khi ID danh m·ª•c cha kh√¥ng t·ªìn t·∫°i\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 422]);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});",
									"",
									"// X√≥a danh m·ª•c t·∫°m th·ªùi sau khi test xong",
									"pm.sendRequest({",
									"    url: 'localhost:3000/categories/' + pm.environment.get('validation_category_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('adminToken')",
									"    }",
									"}, function (err, res) {",
									"    if (!err && res.code === 200) {",
									"        console.log('‚úì ƒê√£ x√≥a danh m·ª•c t·∫°m th·ªùi');",
									"        pm.environment.unset('validation_category_id');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Updated Test Category\",\r\n  \"parent_id\": \"99999\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{validation_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{validation_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra khi c·∫≠p nh·∫≠t v·ªõi ID danh m·ª•c cha kh√¥ng t·ªìn t·∫°i"
					},
					"response": []
				}
			],
			"description": "Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p validation l·ªói"
		},
		{
			"name": "4. Authorization Tests",
			"item": [
				{
					"name": "[No Auth] Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test t·∫°o danh m·ª•c kh√¥ng c√≥ auth: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Unauthorized Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra t·∫°o danh m·ª•c khi kh√¥ng c√≥ x√°c th·ª±c"
					},
					"response": []
				},
				{
					"name": "[User Auth] Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test t·∫°o danh m·ª•c v·ªõi quy·ªÅn user: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn admin\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(403);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"User Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra t·∫°o danh m·ª•c v·ªõi t√†i kho·∫£n user th∆∞·ªùng"
					},
					"response": []
				},
				{
					"name": "[Admin] Create Category for Auth Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ T·∫°o danh m·ª•c cho test auth: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"T·∫°o danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// L∆∞u ID danh m·ª•c ƒë·ªÉ d√πng cho c√°c test ti·∫øp theo",
									"if (response.data && response.data.id) {",
									"    pm.environment.set(\"auth_category_id\", response.data.id);",
									"    console.log('ID danh m·ª•c: ' + response.data.id);",
									"} else if (response.data && response.data.data && response.data.data.id) {",
									"    pm.environment.set(\"auth_category_id\", response.data.data.id);",
									"    console.log('ID danh m·ª•c: ' + response.data.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Auth Test Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "T·∫°o danh m·ª•c ƒë·ªÉ d√πng cho c√°c test authorization"
					},
					"response": []
				},
				{
					"name": "[No Auth] Update Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test c·∫≠p nh·∫≠t danh m·ª•c kh√¥ng c√≥ auth: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'C·∫≠p nh·∫≠t th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Updated Without Auth\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{auth_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{auth_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra c·∫≠p nh·∫≠t danh m·ª•c khi kh√¥ng c√≥ x√°c th·ª±c"
					},
					"response": []
				},
				{
					"name": "[User Auth] Update Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test c·∫≠p nh·∫≠t danh m·ª•c v·ªõi quy·ªÅn user: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'C·∫≠p nh·∫≠t th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn admin\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(403);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Updated By User\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories/{{auth_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{auth_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra c·∫≠p nh·∫≠t danh m·ª•c v·ªõi t√†i kho·∫£n user th∆∞·ªùng"
					},
					"response": []
				},
				{
					"name": "[No Auth] Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test x√≥a danh m·ª•c kh√¥ng c√≥ auth: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'X√≥a th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{auth_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{auth_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra x√≥a danh m·ª•c khi kh√¥ng c√≥ x√°c th·ª±c"
					},
					"response": []
				},
				{
					"name": "[User Auth] Delete Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test x√≥a danh m·ª•c v·ªõi quy·ªÅn user: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'X√≥a th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn admin\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(403);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{auth_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{auth_category_id}}"
							]
						},
						"description": "Ki·ªÉm tra x√≥a danh m·ª•c v·ªõi t√†i kho·∫£n user th∆∞·ªùng"
					},
					"response": []
				},
				{
					"name": "[Admin] Cleanup Auth Test Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ X√≥a danh m·ª•c test auth: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"X√≥a danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// X√≥a bi·∫øn m√¥i tr∆∞·ªùng",
									"pm.environment.unset(\"auth_category_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{auth_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{auth_category_id}}"
							]
						},
						"description": "X√≥a danh m·ª•c sau khi test authorization xong"
					},
					"response": []
				}
			],
			"description": "Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† x√°c th·ª±c"
		},
		{
			"name": "5. Resource Not Found Tests",
			"item": [
				{
					"name": "[No Auth] Get Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test l·∫•y th√¥ng tin danh m·ª•c kh√¥ng c√≥ auth: ' + (!response.success ? 'B·ªã t·ª´ ch·ªëi (ƒë√∫ng)' : 'L·∫•y th√¥ng tin th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"T·ª´ ch·ªëi khi kh√¥ng c√≥ quy·ªÅn\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(401);",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{category_id}}"
							]
						},
						"description": "Ki·ªÉm tra l·∫•y th√¥ng tin danh m·ª•c khi kh√¥ng c√≥ x√°c th·ª±c"
					},
					"response": []
				}
			],
			"description": "Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p t√†i nguy√™n kh√¥ng t·ªìn t·∫°i"
				},
				{
			"name": "6. Conflict Tests",
			"item": [
				{
					"name": "[Admin] Create Category (For Conflict Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ T·∫°o danh m·ª•c cho test conflict: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"T·∫°o danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// L∆∞u ID danh m·ª•c ƒë·ªÉ d√πng cho c√°c test ti·∫øp theo",
									"if (response.data && response.data.id) {",
									"    pm.environment.set(\"conflict_category_id\", response.data.id);",
									"    pm.environment.set(\"conflict_category_name\", \"Conflict Test Category\");",
									"    console.log('ID danh m·ª•c: ' + response.data.id);",
									"} else if (response.data && response.data.data && response.data.data.id) {",
									"    pm.environment.set(\"conflict_category_id\", response.data.data.id);",
									"    pm.environment.set(\"conflict_category_name\", \"Conflict Test Category\");",
									"    console.log('ID danh m·ª•c: ' + response.data.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Conflict Test Category\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "T·∫°o danh m·ª•c ƒë·ªÉ d√πng cho c√°c test tr√πng l·∫∑p"
					},
					"response": []
				},
				{
					"name": "[Admin] Create Category - Duplicate Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ Test t·∫°o danh m·ª•c tr√πng t√™n: ' + (!response.success ? 'L·ªói tr√πng l·∫∑p (ƒë√∫ng)' : 'T·∫°o th√†nh c√¥ng (sai)'));",
									"",
									"pm.test(\"B√°o l·ªói khi t·∫°o danh m·ª•c tr√πng t√™n\", function () {",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(pm.response.code).to.equal(409); // Conflict",
									"    ",
									"    // Ki·ªÉm tra th√¥ng b√°o l·ªói",
									"    console.log('Th√¥ng b√°o l·ªói: ' + response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{conflict_category_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/categories",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories"
							]
						},
						"description": "Ki·ªÉm tra t·∫°o danh m·ª•c v·ªõi t√™n ƒë√£ t·ªìn t·∫°i"
					},
					"response": []
				},
				{
					"name": "Cleanup Conflict Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Log th√¥ng tin ƒë∆°n gi·∫£n",
									"console.log('‚úÖ X√≥a danh m·ª•c test conflict: ' + (response.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'));",
									"",
									"pm.test(\"X√≥a danh m·ª•c th√†nh c√¥ng\", function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// X√≥a bi·∫øn m√¥i tr∆∞·ªùng",
									"pm.environment.unset(\"conflict_category_id\");",
									"pm.environment.unset(\"conflict_category_name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/categories/{{conflict_category_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"categories",
								"{{conflict_category_id}}"
							]
						},
						"description": "X√≥a danh m·ª•c sau khi test conflict xong"
					},
					"response": []
				}
			],
			"description": "Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p xung ƒë·ªôt d·ªØ li·ªáu"
		}
	]
}